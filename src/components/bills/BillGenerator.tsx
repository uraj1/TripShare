import { useState } from 'react';
import { FileText, Loader } from 'lucide-react';
import { useTrip } from '../../context/TripContext';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

export function BillGenerator() {
  const { currentTrip, calculateSplit } = useTrip();
  const [isGenerating, setIsGenerating] = useState(false); // State for loader

  const generatePDF = async () => {
    if (!currentTrip) return;

    setIsGenerating(true); // Show loader

    try {
      const { total, perPerson, individualSplits } = calculateSplit();
      const doc = new jsPDF();

      // Header
      doc.setFontSize(24);
      doc.setTextColor(0, 0, 0);
      doc.text('TripWise', 105, 20, { align: 'center' });
      doc.setFontSize(16);
      doc.text('Travel Expense Report', 105, 30, { align: 'center' });

      // Trip Details
      doc.setFontSize(12);
      doc.autoTable({
        startY: 40,
        head: [['Trip Details', '']],
        body: [
          ['Trip Name', currentTrip.name],
          ['Destination', currentTrip.destination],
          ['Number of Travelers', currentTrip.travelers.length.toString()],
          ['Total Expenses', `Rs.${total.toFixed(2)}`],
          ['Amount per Person', `Rs.${perPerson.toFixed(2)}`],
        ],
        theme: 'grid',
        headStyles: { fillColor: [241, 196, 15], textColor: [0, 0, 0] },
        columnStyles: {
          0: { fontStyle: 'bold', cellWidth: 80 },
          1: { cellWidth: 'auto' },
        },
      });

      // Travelers List
      doc.autoTable({
        startY: doc.lastAutoTable.finalY + 10,
        head: [['Travelers']],
        body: currentTrip.travelers.map((t) => [t.name]),
        theme: 'grid',
        headStyles: { fillColor: [241, 196, 15], textColor: [0, 0, 0] },
      });

      // Expenses Table
      doc.autoTable({
        startY: doc.lastAutoTable.finalY + 10,
        head: [['Category', 'Amount', 'Paid By', 'Date']],
        body: currentTrip.expenses.map((expense) => {
          const paidByTraveler = currentTrip.travelers.find(
            (t) => t.id === expense.paidBy
          );
          return [
            expense.category,
            `Rs.${expense.amount.toFixed(2)}`,
            paidByTraveler?.name || '',
            new Date(expense.date).toLocaleDateString(),
          ];
        }),
        theme: 'grid',
        headStyles: { fillColor: [241, 196, 15], textColor: [0, 0, 0] },
      });

      // Individual Settlements
      const settlementData = currentTrip.travelers.map((traveler) => {
        const split = individualSplits[traveler.id];
        return [
          traveler.name,
          `Rs.${split.paid.toFixed(2)}`,
          split.owes > 0
            ? `Owes ₹${split.owes.toFixed(2)}`
            : `Gets back ₹${Math.abs(split.owes).toFixed(2)}`,
        ];
      });

      doc.autoTable({
        startY: doc.lastAutoTable.finalY + 10,
        head: [['Traveler', 'Paid', 'Settlement']],
        body: settlementData,
        theme: 'grid',
        headStyles: { fillColor: [241, 196, 15], textColor: [0, 0, 0] },
        columnStyles: {
          0: { cellWidth: 60 },
          1: { cellWidth: 60 },
          2: { cellWidth: 70 },
        },
      });

      // Footer
      const pageHeight = doc.internal.pageSize.height;
      doc.setFontSize(10);
      doc.text(
        'Generated by TripWise on ' + new Date().toLocaleDateString(),
        105,
        pageHeight - 10,
        { align: 'center' }
      );

      // Save the PDF
      doc.save(
        `tripwise-${currentTrip.name.toLowerCase().replace(/\s+/g, '-')}.pdf`
      );
    } finally {
      setIsGenerating(false); // Hide loader
    }
  };

  if (!currentTrip) return null;

  return (
    <div className="bg-black p-8 rounded-xl mt-8">
      <h2 className="text-2xl font-bold text-yellow-400 mb-6">
        Generate Expense Report
      </h2>
      <button
        onClick={generatePDF}
        className="w-full bg-yellow-400 text-black px-6 py-3 rounded-lg font-semibold flex items-center justify-center gap-2 hover:bg-yellow-300"
        disabled={isGenerating}
      >
        {isGenerating ? (
          <>
            <Loader className="h-5 w-5 animate-spin" />
            Generating...
          </>
        ) : (
          <>
            <FileText className="h-5 w-5" />
            Download PDF Report
          </>
        )}
      </button>
    </div>
  );
}
